// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "KickOutGroupArgs.pb.h"

@implementation KickOutGroupArgsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [KickOutGroupArgsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface KickOutGroupArgs ()
@property (retain) NSString* groupId;
@property (retain) NSString* kickedUserId;
@end

@implementation KickOutGroupArgs

- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) value_ {
  hasGroupId_ = !!value_;
}
@synthesize groupId;
- (BOOL) hasKickedUserId {
  return !!hasKickedUserId_;
}
- (void) setHasKickedUserId:(BOOL) value_ {
  hasKickedUserId_ = !!value_;
}
@synthesize kickedUserId;
- (void) dealloc {
  self.groupId = nil;
  self.kickedUserId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.groupId = @"";
    self.kickedUserId = @"";
  }
  return self;
}
static KickOutGroupArgs* defaultKickOutGroupArgsInstance = nil;
+ (void) initialize {
  if (self == [KickOutGroupArgs class]) {
    defaultKickOutGroupArgsInstance = [[KickOutGroupArgs alloc] init];
  }
}
+ (KickOutGroupArgs*) defaultInstance {
  return defaultKickOutGroupArgsInstance;
}
- (KickOutGroupArgs*) defaultInstance {
  return defaultKickOutGroupArgsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasGroupId) {
    [output writeString:1 value:self.groupId];
  }
  if (self.hasKickedUserId) {
    [output writeString:2 value:self.kickedUserId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasGroupId) {
    size_ += computeStringSize(1, self.groupId);
  }
  if (self.hasKickedUserId) {
    size_ += computeStringSize(2, self.kickedUserId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (KickOutGroupArgs*) parseFromData:(NSData*) data {
  return (KickOutGroupArgs*)[[[KickOutGroupArgs builder] mergeFromData:data] build];
}
+ (KickOutGroupArgs*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KickOutGroupArgs*)[[[KickOutGroupArgs builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (KickOutGroupArgs*) parseFromInputStream:(NSInputStream*) input {
  return (KickOutGroupArgs*)[[[KickOutGroupArgs builder] mergeFromInputStream:input] build];
}
+ (KickOutGroupArgs*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KickOutGroupArgs*)[[[KickOutGroupArgs builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KickOutGroupArgs*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (KickOutGroupArgs*)[[[KickOutGroupArgs builder] mergeFromCodedInputStream:input] build];
}
+ (KickOutGroupArgs*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (KickOutGroupArgs*)[[[KickOutGroupArgs builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (KickOutGroupArgs_Builder*) builder {
  return [[[KickOutGroupArgs_Builder alloc] init] autorelease];
}
+ (KickOutGroupArgs_Builder*) builderWithPrototype:(KickOutGroupArgs*) prototype {
  return [[KickOutGroupArgs builder] mergeFrom:prototype];
}
- (KickOutGroupArgs_Builder*) builder {
  return [KickOutGroupArgs builder];
}
- (KickOutGroupArgs_Builder*) toBuilder {
  return [KickOutGroupArgs builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", self.groupId];
  }
  if (self.hasKickedUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kickedUserId", self.kickedUserId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[KickOutGroupArgs class]]) {
    return NO;
  }
  KickOutGroupArgs *otherMessage = other;
  return
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || [self.groupId isEqual:otherMessage.groupId]) &&
      self.hasKickedUserId == otherMessage.hasKickedUserId &&
      (!self.hasKickedUserId || [self.kickedUserId isEqual:otherMessage.kickedUserId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [self.groupId hash];
  }
  if (self.hasKickedUserId) {
    hashCode = hashCode * 31 + [self.kickedUserId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface KickOutGroupArgs_Builder()
@property (retain) KickOutGroupArgs* result;
@end

@implementation KickOutGroupArgs_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[KickOutGroupArgs alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (KickOutGroupArgs_Builder*) clear {
  self.result = [[[KickOutGroupArgs alloc] init] autorelease];
  return self;
}
- (KickOutGroupArgs_Builder*) clone {
  return [KickOutGroupArgs builderWithPrototype:result];
}
- (KickOutGroupArgs*) defaultInstance {
  return [KickOutGroupArgs defaultInstance];
}
- (KickOutGroupArgs*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (KickOutGroupArgs*) buildPartial {
  KickOutGroupArgs* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (KickOutGroupArgs_Builder*) mergeFrom:(KickOutGroupArgs*) other {
  if (other == [KickOutGroupArgs defaultInstance]) {
    return self;
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasKickedUserId) {
    [self setKickedUserId:other.kickedUserId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (KickOutGroupArgs_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (KickOutGroupArgs_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setGroupId:[input readString]];
        break;
      }
      case 18: {
        [self setKickedUserId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasGroupId {
  return result.hasGroupId;
}
- (NSString*) groupId {
  return result.groupId;
}
- (KickOutGroupArgs_Builder*) setGroupId:(NSString*) value {
  result.hasGroupId = YES;
  result.groupId = value;
  return self;
}
- (KickOutGroupArgs_Builder*) clearGroupId {
  result.hasGroupId = NO;
  result.groupId = @"";
  return self;
}
- (BOOL) hasKickedUserId {
  return result.hasKickedUserId;
}
- (NSString*) kickedUserId {
  return result.kickedUserId;
}
- (KickOutGroupArgs_Builder*) setKickedUserId:(NSString*) value {
  result.hasKickedUserId = YES;
  result.kickedUserId = value;
  return self;
}
- (KickOutGroupArgs_Builder*) clearKickedUserId {
  result.hasKickedUserId = NO;
  result.kickedUserId = @"";
  return self;
}
@end

