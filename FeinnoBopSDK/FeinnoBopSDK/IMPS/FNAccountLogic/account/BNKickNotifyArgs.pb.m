// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "BNKickNotifyArgs.pb.h"

@implementation BnkickNotifyArgsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BnkickNotifyArgsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface BNKickNotifyArgs ()
@property (retain) NSString* eventType;
@property (retain) NSString* notifyDesc;
@property int32_t clientType;
@property (retain) NSString* clientVersion;
@end

@implementation BNKickNotifyArgs

- (BOOL) hasEventType {
  return !!hasEventType_;
}
- (void) setHasEventType:(BOOL) value_ {
  hasEventType_ = !!value_;
}
@synthesize eventType;
- (BOOL) hasNotifyDesc {
  return !!hasNotifyDesc_;
}
- (void) setHasNotifyDesc:(BOOL) value_ {
  hasNotifyDesc_ = !!value_;
}
@synthesize notifyDesc;
- (BOOL) hasClientType {
  return !!hasClientType_;
}
- (void) setHasClientType:(BOOL) value_ {
  hasClientType_ = !!value_;
}
@synthesize clientType;
- (BOOL) hasClientVersion {
  return !!hasClientVersion_;
}
- (void) setHasClientVersion:(BOOL) value_ {
  hasClientVersion_ = !!value_;
}
@synthesize clientVersion;
- (void) dealloc {
  self.eventType = nil;
  self.notifyDesc = nil;
  self.clientVersion = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.eventType = @"";
    self.notifyDesc = @"";
    self.clientType = 0;
    self.clientVersion = @"";
  }
  return self;
}
static BNKickNotifyArgs* defaultBNKickNotifyArgsInstance = nil;
+ (void) initialize {
  if (self == [BNKickNotifyArgs class]) {
    defaultBNKickNotifyArgsInstance = [[BNKickNotifyArgs alloc] init];
  }
}
+ (BNKickNotifyArgs*) defaultInstance {
  return defaultBNKickNotifyArgsInstance;
}
- (BNKickNotifyArgs*) defaultInstance {
  return defaultBNKickNotifyArgsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventType) {
    [output writeString:1 value:self.eventType];
  }
  if (self.hasNotifyDesc) {
    [output writeString:2 value:self.notifyDesc];
  }
  if (self.hasClientType) {
    [output writeInt32:3 value:self.clientType];
  }
  if (self.hasClientVersion) {
    [output writeString:4 value:self.clientVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventType) {
    size_ += computeStringSize(1, self.eventType);
  }
  if (self.hasNotifyDesc) {
    size_ += computeStringSize(2, self.notifyDesc);
  }
  if (self.hasClientType) {
    size_ += computeInt32Size(3, self.clientType);
  }
  if (self.hasClientVersion) {
    size_ += computeStringSize(4, self.clientVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BNKickNotifyArgs*) parseFromData:(NSData*) data {
  return (BNKickNotifyArgs*)[[[BNKickNotifyArgs builder] mergeFromData:data] build];
}
+ (BNKickNotifyArgs*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BNKickNotifyArgs*)[[[BNKickNotifyArgs builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BNKickNotifyArgs*) parseFromInputStream:(NSInputStream*) input {
  return (BNKickNotifyArgs*)[[[BNKickNotifyArgs builder] mergeFromInputStream:input] build];
}
+ (BNKickNotifyArgs*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BNKickNotifyArgs*)[[[BNKickNotifyArgs builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BNKickNotifyArgs*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BNKickNotifyArgs*)[[[BNKickNotifyArgs builder] mergeFromCodedInputStream:input] build];
}
+ (BNKickNotifyArgs*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BNKickNotifyArgs*)[[[BNKickNotifyArgs builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BNKickNotifyArgs_Builder*) builder {
  return [[[BNKickNotifyArgs_Builder alloc] init] autorelease];
}
+ (BNKickNotifyArgs_Builder*) builderWithPrototype:(BNKickNotifyArgs*) prototype {
  return [[BNKickNotifyArgs builder] mergeFrom:prototype];
}
- (BNKickNotifyArgs_Builder*) builder {
  return [BNKickNotifyArgs builder];
}
- (BNKickNotifyArgs_Builder*) toBuilder {
  return [BNKickNotifyArgs builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventType", self.eventType];
  }
  if (self.hasNotifyDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"notifyDesc", self.notifyDesc];
  }
  if (self.hasClientType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientType", [NSNumber numberWithInt:self.clientType]];
  }
  if (self.hasClientVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientVersion", self.clientVersion];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BNKickNotifyArgs class]]) {
    return NO;
  }
  BNKickNotifyArgs *otherMessage = other;
  return
      self.hasEventType == otherMessage.hasEventType &&
      (!self.hasEventType || [self.eventType isEqual:otherMessage.eventType]) &&
      self.hasNotifyDesc == otherMessage.hasNotifyDesc &&
      (!self.hasNotifyDesc || [self.notifyDesc isEqual:otherMessage.notifyDesc]) &&
      self.hasClientType == otherMessage.hasClientType &&
      (!self.hasClientType || self.clientType == otherMessage.clientType) &&
      self.hasClientVersion == otherMessage.hasClientVersion &&
      (!self.hasClientVersion || [self.clientVersion isEqual:otherMessage.clientVersion]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasEventType) {
    hashCode = hashCode * 31 + [self.eventType hash];
  }
  if (self.hasNotifyDesc) {
    hashCode = hashCode * 31 + [self.notifyDesc hash];
  }
  if (self.hasClientType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.clientType] hash];
  }
  if (self.hasClientVersion) {
    hashCode = hashCode * 31 + [self.clientVersion hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BNKickNotifyArgs_Builder()
@property (retain) BNKickNotifyArgs* result;
@end

@implementation BNKickNotifyArgs_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BNKickNotifyArgs alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BNKickNotifyArgs_Builder*) clear {
  self.result = [[[BNKickNotifyArgs alloc] init] autorelease];
  return self;
}
- (BNKickNotifyArgs_Builder*) clone {
  return [BNKickNotifyArgs builderWithPrototype:result];
}
- (BNKickNotifyArgs*) defaultInstance {
  return [BNKickNotifyArgs defaultInstance];
}
- (BNKickNotifyArgs*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BNKickNotifyArgs*) buildPartial {
  BNKickNotifyArgs* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BNKickNotifyArgs_Builder*) mergeFrom:(BNKickNotifyArgs*) other {
  if (other == [BNKickNotifyArgs defaultInstance]) {
    return self;
  }
  if (other.hasEventType) {
    [self setEventType:other.eventType];
  }
  if (other.hasNotifyDesc) {
    [self setNotifyDesc:other.notifyDesc];
  }
  if (other.hasClientType) {
    [self setClientType:other.clientType];
  }
  if (other.hasClientVersion) {
    [self setClientVersion:other.clientVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BNKickNotifyArgs_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BNKickNotifyArgs_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventType:[input readString]];
        break;
      }
      case 18: {
        [self setNotifyDesc:[input readString]];
        break;
      }
      case 24: {
        [self setClientType:[input readInt32]];
        break;
      }
      case 34: {
        [self setClientVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasEventType {
  return result.hasEventType;
}
- (NSString*) eventType {
  return result.eventType;
}
- (BNKickNotifyArgs_Builder*) setEventType:(NSString*) value {
  result.hasEventType = YES;
  result.eventType = value;
  return self;
}
- (BNKickNotifyArgs_Builder*) clearEventType {
  result.hasEventType = NO;
  result.eventType = @"";
  return self;
}
- (BOOL) hasNotifyDesc {
  return result.hasNotifyDesc;
}
- (NSString*) notifyDesc {
  return result.notifyDesc;
}
- (BNKickNotifyArgs_Builder*) setNotifyDesc:(NSString*) value {
  result.hasNotifyDesc = YES;
  result.notifyDesc = value;
  return self;
}
- (BNKickNotifyArgs_Builder*) clearNotifyDesc {
  result.hasNotifyDesc = NO;
  result.notifyDesc = @"";
  return self;
}
- (BOOL) hasClientType {
  return result.hasClientType;
}
- (int32_t) clientType {
  return result.clientType;
}
- (BNKickNotifyArgs_Builder*) setClientType:(int32_t) value {
  result.hasClientType = YES;
  result.clientType = value;
  return self;
}
- (BNKickNotifyArgs_Builder*) clearClientType {
  result.hasClientType = NO;
  result.clientType = 0;
  return self;
}
- (BOOL) hasClientVersion {
  return result.hasClientVersion;
}
- (NSString*) clientVersion {
  return result.clientVersion;
}
- (BNKickNotifyArgs_Builder*) setClientVersion:(NSString*) value {
  result.hasClientVersion = YES;
  result.clientVersion = value;
  return self;
}
- (BNKickNotifyArgs_Builder*) clearClientVersion {
  result.hasClientVersion = NO;
  result.clientVersion = @"";
  return self;
}
@end

