// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "RegisterWithCertPicReqArgs.pb.h"

@implementation RegisterWithCertPicReqArgsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [RegisterWithCertPicReqArgsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface RegisterWithCertPicReqArgs ()
@property int32_t regType;
@property (retain) NSString* regValue;
@property (retain) NSString* pwd;
@property (retain) NSString* certPicKey;
@property (retain) NSString* certPicValue;
@end

@implementation RegisterWithCertPicReqArgs

- (BOOL) hasRegType {
  return !!hasRegType_;
}
- (void) setHasRegType:(BOOL) value_ {
  hasRegType_ = !!value_;
}
@synthesize regType;
- (BOOL) hasRegValue {
  return !!hasRegValue_;
}
- (void) setHasRegValue:(BOOL) value_ {
  hasRegValue_ = !!value_;
}
@synthesize regValue;
- (BOOL) hasPwd {
  return !!hasPwd_;
}
- (void) setHasPwd:(BOOL) value_ {
  hasPwd_ = !!value_;
}
@synthesize pwd;
- (BOOL) hasCertPicKey {
  return !!hasCertPicKey_;
}
- (void) setHasCertPicKey:(BOOL) value_ {
  hasCertPicKey_ = !!value_;
}
@synthesize certPicKey;
- (BOOL) hasCertPicValue {
  return !!hasCertPicValue_;
}
- (void) setHasCertPicValue:(BOOL) value_ {
  hasCertPicValue_ = !!value_;
}
@synthesize certPicValue;
- (void) dealloc {
  self.regValue = nil;
  self.pwd = nil;
  self.certPicKey = nil;
  self.certPicValue = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.regType = 0;
    self.regValue = @"";
    self.pwd = @"";
    self.certPicKey = @"";
    self.certPicValue = @"";
  }
  return self;
}
static RegisterWithCertPicReqArgs* defaultRegisterWithCertPicReqArgsInstance = nil;
+ (void) initialize {
  if (self == [RegisterWithCertPicReqArgs class]) {
    defaultRegisterWithCertPicReqArgsInstance = [[RegisterWithCertPicReqArgs alloc] init];
  }
}
+ (RegisterWithCertPicReqArgs*) defaultInstance {
  return defaultRegisterWithCertPicReqArgsInstance;
}
- (RegisterWithCertPicReqArgs*) defaultInstance {
  return defaultRegisterWithCertPicReqArgsInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRegType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRegType) {
    [output writeInt32:1 value:self.regType];
  }
  if (self.hasRegValue) {
    [output writeString:2 value:self.regValue];
  }
  if (self.hasPwd) {
    [output writeString:3 value:self.pwd];
  }
  if (self.hasCertPicKey) {
    [output writeString:4 value:self.certPicKey];
  }
  if (self.hasCertPicValue) {
    [output writeString:5 value:self.certPicValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRegType) {
    size_ += computeInt32Size(1, self.regType);
  }
  if (self.hasRegValue) {
    size_ += computeStringSize(2, self.regValue);
  }
  if (self.hasPwd) {
    size_ += computeStringSize(3, self.pwd);
  }
  if (self.hasCertPicKey) {
    size_ += computeStringSize(4, self.certPicKey);
  }
  if (self.hasCertPicValue) {
    size_ += computeStringSize(5, self.certPicValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RegisterWithCertPicReqArgs*) parseFromData:(NSData*) data {
  return (RegisterWithCertPicReqArgs*)[[[RegisterWithCertPicReqArgs builder] mergeFromData:data] build];
}
+ (RegisterWithCertPicReqArgs*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterWithCertPicReqArgs*)[[[RegisterWithCertPicReqArgs builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RegisterWithCertPicReqArgs*) parseFromInputStream:(NSInputStream*) input {
  return (RegisterWithCertPicReqArgs*)[[[RegisterWithCertPicReqArgs builder] mergeFromInputStream:input] build];
}
+ (RegisterWithCertPicReqArgs*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterWithCertPicReqArgs*)[[[RegisterWithCertPicReqArgs builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterWithCertPicReqArgs*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RegisterWithCertPicReqArgs*)[[[RegisterWithCertPicReqArgs builder] mergeFromCodedInputStream:input] build];
}
+ (RegisterWithCertPicReqArgs*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegisterWithCertPicReqArgs*)[[[RegisterWithCertPicReqArgs builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegisterWithCertPicReqArgs_Builder*) builder {
  return [[[RegisterWithCertPicReqArgs_Builder alloc] init] autorelease];
}
+ (RegisterWithCertPicReqArgs_Builder*) builderWithPrototype:(RegisterWithCertPicReqArgs*) prototype {
  return [[RegisterWithCertPicReqArgs builder] mergeFrom:prototype];
}
- (RegisterWithCertPicReqArgs_Builder*) builder {
  return [RegisterWithCertPicReqArgs builder];
}
- (RegisterWithCertPicReqArgs_Builder*) toBuilder {
  return [RegisterWithCertPicReqArgs builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRegType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"regType", [NSNumber numberWithInt:self.regType]];
  }
  if (self.hasRegValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"regValue", self.regValue];
  }
  if (self.hasPwd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pwd", self.pwd];
  }
  if (self.hasCertPicKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"certPicKey", self.certPicKey];
  }
  if (self.hasCertPicValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"certPicValue", self.certPicValue];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RegisterWithCertPicReqArgs class]]) {
    return NO;
  }
  RegisterWithCertPicReqArgs *otherMessage = other;
  return
      self.hasRegType == otherMessage.hasRegType &&
      (!self.hasRegType || self.regType == otherMessage.regType) &&
      self.hasRegValue == otherMessage.hasRegValue &&
      (!self.hasRegValue || [self.regValue isEqual:otherMessage.regValue]) &&
      self.hasPwd == otherMessage.hasPwd &&
      (!self.hasPwd || [self.pwd isEqual:otherMessage.pwd]) &&
      self.hasCertPicKey == otherMessage.hasCertPicKey &&
      (!self.hasCertPicKey || [self.certPicKey isEqual:otherMessage.certPicKey]) &&
      self.hasCertPicValue == otherMessage.hasCertPicValue &&
      (!self.hasCertPicValue || [self.certPicValue isEqual:otherMessage.certPicValue]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasRegType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.regType] hash];
  }
  if (self.hasRegValue) {
    hashCode = hashCode * 31 + [self.regValue hash];
  }
  if (self.hasPwd) {
    hashCode = hashCode * 31 + [self.pwd hash];
  }
  if (self.hasCertPicKey) {
    hashCode = hashCode * 31 + [self.certPicKey hash];
  }
  if (self.hasCertPicValue) {
    hashCode = hashCode * 31 + [self.certPicValue hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RegisterWithCertPicReqArgs_Builder()
@property (retain) RegisterWithCertPicReqArgs* result;
@end

@implementation RegisterWithCertPicReqArgs_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RegisterWithCertPicReqArgs alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RegisterWithCertPicReqArgs_Builder*) clear {
  self.result = [[[RegisterWithCertPicReqArgs alloc] init] autorelease];
  return self;
}
- (RegisterWithCertPicReqArgs_Builder*) clone {
  return [RegisterWithCertPicReqArgs builderWithPrototype:result];
}
- (RegisterWithCertPicReqArgs*) defaultInstance {
  return [RegisterWithCertPicReqArgs defaultInstance];
}
- (RegisterWithCertPicReqArgs*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RegisterWithCertPicReqArgs*) buildPartial {
  RegisterWithCertPicReqArgs* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RegisterWithCertPicReqArgs_Builder*) mergeFrom:(RegisterWithCertPicReqArgs*) other {
  if (other == [RegisterWithCertPicReqArgs defaultInstance]) {
    return self;
  }
  if (other.hasRegType) {
    [self setRegType:other.regType];
  }
  if (other.hasRegValue) {
    [self setRegValue:other.regValue];
  }
  if (other.hasPwd) {
    [self setPwd:other.pwd];
  }
  if (other.hasCertPicKey) {
    [self setCertPicKey:other.certPicKey];
  }
  if (other.hasCertPicValue) {
    [self setCertPicValue:other.certPicValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RegisterWithCertPicReqArgs_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RegisterWithCertPicReqArgs_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRegType:[input readInt32]];
        break;
      }
      case 18: {
        [self setRegValue:[input readString]];
        break;
      }
      case 26: {
        [self setPwd:[input readString]];
        break;
      }
      case 34: {
        [self setCertPicKey:[input readString]];
        break;
      }
      case 42: {
        [self setCertPicValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRegType {
  return result.hasRegType;
}
- (int32_t) regType {
  return result.regType;
}
- (RegisterWithCertPicReqArgs_Builder*) setRegType:(int32_t) value {
  result.hasRegType = YES;
  result.regType = value;
  return self;
}
- (RegisterWithCertPicReqArgs_Builder*) clearRegType {
  result.hasRegType = NO;
  result.regType = 0;
  return self;
}
- (BOOL) hasRegValue {
  return result.hasRegValue;
}
- (NSString*) regValue {
  return result.regValue;
}
- (RegisterWithCertPicReqArgs_Builder*) setRegValue:(NSString*) value {
  result.hasRegValue = YES;
  result.regValue = value;
  return self;
}
- (RegisterWithCertPicReqArgs_Builder*) clearRegValue {
  result.hasRegValue = NO;
  result.regValue = @"";
  return self;
}
- (BOOL) hasPwd {
  return result.hasPwd;
}
- (NSString*) pwd {
  return result.pwd;
}
- (RegisterWithCertPicReqArgs_Builder*) setPwd:(NSString*) value {
  result.hasPwd = YES;
  result.pwd = value;
  return self;
}
- (RegisterWithCertPicReqArgs_Builder*) clearPwd {
  result.hasPwd = NO;
  result.pwd = @"";
  return self;
}
- (BOOL) hasCertPicKey {
  return result.hasCertPicKey;
}
- (NSString*) certPicKey {
  return result.certPicKey;
}
- (RegisterWithCertPicReqArgs_Builder*) setCertPicKey:(NSString*) value {
  result.hasCertPicKey = YES;
  result.certPicKey = value;
  return self;
}
- (RegisterWithCertPicReqArgs_Builder*) clearCertPicKey {
  result.hasCertPicKey = NO;
  result.certPicKey = @"";
  return self;
}
- (BOOL) hasCertPicValue {
  return result.hasCertPicValue;
}
- (NSString*) certPicValue {
  return result.certPicValue;
}
- (RegisterWithCertPicReqArgs_Builder*) setCertPicValue:(NSString*) value {
  result.hasCertPicValue = YES;
  result.certPicValue = value;
  return self;
}
- (RegisterWithCertPicReqArgs_Builder*) clearCertPicValue {
  result.hasCertPicValue = NO;
  result.certPicValue = @"";
  return self;
}
@end

