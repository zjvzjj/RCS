// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MakeCertPicRspRets.pb.h"

@implementation MakeCertPicRspRetsRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MakeCertPicRspRetsRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MakeCertPicRspRets ()
@property int32_t retCode;
@property int32_t picType;
@property (retain) NSString* certPicKey;
@property (retain) NSString* certPicBase64Str;
@property (retain) NSString* certPicValue;
@end

@implementation MakeCertPicRspRets

- (BOOL) hasRetCode {
  return !!hasRetCode_;
}
- (void) setHasRetCode:(BOOL) value_ {
  hasRetCode_ = !!value_;
}
@synthesize retCode;
- (BOOL) hasPicType {
  return !!hasPicType_;
}
- (void) setHasPicType:(BOOL) value_ {
  hasPicType_ = !!value_;
}
@synthesize picType;
- (BOOL) hasCertPicKey {
  return !!hasCertPicKey_;
}
- (void) setHasCertPicKey:(BOOL) value_ {
  hasCertPicKey_ = !!value_;
}
@synthesize certPicKey;
- (BOOL) hasCertPicBase64Str {
  return !!hasCertPicBase64Str_;
}
- (void) setHasCertPicBase64Str:(BOOL) value_ {
  hasCertPicBase64Str_ = !!value_;
}
@synthesize certPicBase64Str;
- (BOOL) hasCertPicValue {
  return !!hasCertPicValue_;
}
- (void) setHasCertPicValue:(BOOL) value_ {
  hasCertPicValue_ = !!value_;
}
@synthesize certPicValue;
- (void) dealloc {
  self.certPicKey = nil;
  self.certPicBase64Str = nil;
  self.certPicValue = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.retCode = 0;
    self.picType = 0;
    self.certPicKey = @"";
    self.certPicBase64Str = @"";
    self.certPicValue = @"";
  }
  return self;
}
static MakeCertPicRspRets* defaultMakeCertPicRspRetsInstance = nil;
+ (void) initialize {
  if (self == [MakeCertPicRspRets class]) {
    defaultMakeCertPicRspRetsInstance = [[MakeCertPicRspRets alloc] init];
  }
}
+ (MakeCertPicRspRets*) defaultInstance {
  return defaultMakeCertPicRspRetsInstance;
}
- (MakeCertPicRspRets*) defaultInstance {
  return defaultMakeCertPicRspRetsInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRetCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRetCode) {
    [output writeInt32:1 value:self.retCode];
  }
  if (self.hasPicType) {
    [output writeInt32:2 value:self.picType];
  }
  if (self.hasCertPicKey) {
    [output writeString:3 value:self.certPicKey];
  }
  if (self.hasCertPicBase64Str) {
    [output writeString:4 value:self.certPicBase64Str];
  }
  if (self.hasCertPicValue) {
    [output writeString:5 value:self.certPicValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRetCode) {
    size_ += computeInt32Size(1, self.retCode);
  }
  if (self.hasPicType) {
    size_ += computeInt32Size(2, self.picType);
  }
  if (self.hasCertPicKey) {
    size_ += computeStringSize(3, self.certPicKey);
  }
  if (self.hasCertPicBase64Str) {
    size_ += computeStringSize(4, self.certPicBase64Str);
  }
  if (self.hasCertPicValue) {
    size_ += computeStringSize(5, self.certPicValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MakeCertPicRspRets*) parseFromData:(NSData*) data {
  return (MakeCertPicRspRets*)[[[MakeCertPicRspRets builder] mergeFromData:data] build];
}
+ (MakeCertPicRspRets*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MakeCertPicRspRets*)[[[MakeCertPicRspRets builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MakeCertPicRspRets*) parseFromInputStream:(NSInputStream*) input {
  return (MakeCertPicRspRets*)[[[MakeCertPicRspRets builder] mergeFromInputStream:input] build];
}
+ (MakeCertPicRspRets*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MakeCertPicRspRets*)[[[MakeCertPicRspRets builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MakeCertPicRspRets*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MakeCertPicRspRets*)[[[MakeCertPicRspRets builder] mergeFromCodedInputStream:input] build];
}
+ (MakeCertPicRspRets*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MakeCertPicRspRets*)[[[MakeCertPicRspRets builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MakeCertPicRspRets_Builder*) builder {
  return [[[MakeCertPicRspRets_Builder alloc] init] autorelease];
}
+ (MakeCertPicRspRets_Builder*) builderWithPrototype:(MakeCertPicRspRets*) prototype {
  return [[MakeCertPicRspRets builder] mergeFrom:prototype];
}
- (MakeCertPicRspRets_Builder*) builder {
  return [MakeCertPicRspRets builder];
}
- (MakeCertPicRspRets_Builder*) toBuilder {
  return [MakeCertPicRspRets builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRetCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"retCode", [NSNumber numberWithInt:self.retCode]];
  }
  if (self.hasPicType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"picType", [NSNumber numberWithInt:self.picType]];
  }
  if (self.hasCertPicKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"certPicKey", self.certPicKey];
  }
  if (self.hasCertPicBase64Str) {
    [output appendFormat:@"%@%@: %@\n", indent, @"certPicBase64Str", self.certPicBase64Str];
  }
  if (self.hasCertPicValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"certPicValue", self.certPicValue];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MakeCertPicRspRets class]]) {
    return NO;
  }
  MakeCertPicRspRets *otherMessage = other;
  return
      self.hasRetCode == otherMessage.hasRetCode &&
      (!self.hasRetCode || self.retCode == otherMessage.retCode) &&
      self.hasPicType == otherMessage.hasPicType &&
      (!self.hasPicType || self.picType == otherMessage.picType) &&
      self.hasCertPicKey == otherMessage.hasCertPicKey &&
      (!self.hasCertPicKey || [self.certPicKey isEqual:otherMessage.certPicKey]) &&
      self.hasCertPicBase64Str == otherMessage.hasCertPicBase64Str &&
      (!self.hasCertPicBase64Str || [self.certPicBase64Str isEqual:otherMessage.certPicBase64Str]) &&
      self.hasCertPicValue == otherMessage.hasCertPicValue &&
      (!self.hasCertPicValue || [self.certPicValue isEqual:otherMessage.certPicValue]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasRetCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.retCode] hash];
  }
  if (self.hasPicType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.picType] hash];
  }
  if (self.hasCertPicKey) {
    hashCode = hashCode * 31 + [self.certPicKey hash];
  }
  if (self.hasCertPicBase64Str) {
    hashCode = hashCode * 31 + [self.certPicBase64Str hash];
  }
  if (self.hasCertPicValue) {
    hashCode = hashCode * 31 + [self.certPicValue hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MakeCertPicRspRets_Builder()
@property (retain) MakeCertPicRspRets* result;
@end

@implementation MakeCertPicRspRets_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MakeCertPicRspRets alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MakeCertPicRspRets_Builder*) clear {
  self.result = [[[MakeCertPicRspRets alloc] init] autorelease];
  return self;
}
- (MakeCertPicRspRets_Builder*) clone {
  return [MakeCertPicRspRets builderWithPrototype:result];
}
- (MakeCertPicRspRets*) defaultInstance {
  return [MakeCertPicRspRets defaultInstance];
}
- (MakeCertPicRspRets*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MakeCertPicRspRets*) buildPartial {
  MakeCertPicRspRets* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MakeCertPicRspRets_Builder*) mergeFrom:(MakeCertPicRspRets*) other {
  if (other == [MakeCertPicRspRets defaultInstance]) {
    return self;
  }
  if (other.hasRetCode) {
    [self setRetCode:other.retCode];
  }
  if (other.hasPicType) {
    [self setPicType:other.picType];
  }
  if (other.hasCertPicKey) {
    [self setCertPicKey:other.certPicKey];
  }
  if (other.hasCertPicBase64Str) {
    [self setCertPicBase64Str:other.certPicBase64Str];
  }
  if (other.hasCertPicValue) {
    [self setCertPicValue:other.certPicValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MakeCertPicRspRets_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MakeCertPicRspRets_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRetCode:[input readInt32]];
        break;
      }
      case 16: {
        [self setPicType:[input readInt32]];
        break;
      }
      case 26: {
        [self setCertPicKey:[input readString]];
        break;
      }
      case 34: {
        [self setCertPicBase64Str:[input readString]];
        break;
      }
      case 42: {
        [self setCertPicValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRetCode {
  return result.hasRetCode;
}
- (int32_t) retCode {
  return result.retCode;
}
- (MakeCertPicRspRets_Builder*) setRetCode:(int32_t) value {
  result.hasRetCode = YES;
  result.retCode = value;
  return self;
}
- (MakeCertPicRspRets_Builder*) clearRetCode {
  result.hasRetCode = NO;
  result.retCode = 0;
  return self;
}
- (BOOL) hasPicType {
  return result.hasPicType;
}
- (int32_t) picType {
  return result.picType;
}
- (MakeCertPicRspRets_Builder*) setPicType:(int32_t) value {
  result.hasPicType = YES;
  result.picType = value;
  return self;
}
- (MakeCertPicRspRets_Builder*) clearPicType {
  result.hasPicType = NO;
  result.picType = 0;
  return self;
}
- (BOOL) hasCertPicKey {
  return result.hasCertPicKey;
}
- (NSString*) certPicKey {
  return result.certPicKey;
}
- (MakeCertPicRspRets_Builder*) setCertPicKey:(NSString*) value {
  result.hasCertPicKey = YES;
  result.certPicKey = value;
  return self;
}
- (MakeCertPicRspRets_Builder*) clearCertPicKey {
  result.hasCertPicKey = NO;
  result.certPicKey = @"";
  return self;
}
- (BOOL) hasCertPicBase64Str {
  return result.hasCertPicBase64Str;
}
- (NSString*) certPicBase64Str {
  return result.certPicBase64Str;
}
- (MakeCertPicRspRets_Builder*) setCertPicBase64Str:(NSString*) value {
  result.hasCertPicBase64Str = YES;
  result.certPicBase64Str = value;
  return self;
}
- (MakeCertPicRspRets_Builder*) clearCertPicBase64Str {
  result.hasCertPicBase64Str = NO;
  result.certPicBase64Str = @"";
  return self;
}
- (BOOL) hasCertPicValue {
  return result.hasCertPicValue;
}
- (NSString*) certPicValue {
  return result.certPicValue;
}
- (MakeCertPicRspRets_Builder*) setCertPicValue:(NSString*) value {
  result.hasCertPicValue = YES;
  result.certPicValue = value;
  return self;
}
- (MakeCertPicRspRets_Builder*) clearCertPicValue {
  result.hasCertPicValue = NO;
  result.certPicValue = @"";
  return self;
}
@end

